iload3
iload4
iload5
istore1
istore2
istore3
istore4
istore5
istore6
wide1
wide2
wide iload1
wide iload2
wide iload3
wide iload4
wide istore1
wide istore2
wide istore3
wide istore4
ldc w1
ldc w2
ldc w3
ldc w4

THE MICROARCHITECTURE LEVEL
Operations
PC = PC + 1; fetch; goto (MBR)
goto Main1
MAR = SP = SP − 1; rd
H = TOS
MDR = TOS = MDR + H; wr; goto Main1
MAR = SP = SP − 1; rd
H = TOS
MDR = TOS = MDR − H; wr; goto Main1
MAR = SP = SP − 1; rd
H = TOS
MDR = TOS = MDR AND H; wr; goto Main1
MAR = SP = SP − 1; rd
H = TOS
MDR = TOS = MDR OR H; wr; goto Main1
MAR = SP = SP + 1
MDR = TOS; wr; goto Main1
MAR = SP = SP − 1; rd
TOS = MDR; goto Main1
MAR = SP − 1; rd
MAR = SP
H = MDR; wr
MDR = TOS
MAR = SP − 1; wr
TOS = H; goto Main1
SP = MAR = SP + 1
PC = PC + 1; fetch
MDR = TOS = MBR; wr; goto Main1
H = LV
MAR = MBRU + H; rd
MAR = SP = SP + 1
PC = PC + 1; fetch; wr
TOS = MDR; goto Main1
H = LV
MAR = MBRU + H
MDR = TOS; wr
SP = MAR = SP − 1; rd
PC = PC + 1; fetch
TOS = MDR; goto Main1
PC = PC + 1; fetch;
goto (MBR OR 0x100)
PC = PC + 1; fetch
H = MBRU << 8
H = MBRU OR H
MAR = LV + H; rd; goto iload3
PC = PC + 1; fetch
H = MBRU << 8
H = MBRU OR H
MAR = LV + H; goto istore3
PC = PC + 1; fetch
H = MBRU << 8
H = MBRU OR H
MAR = H + CPP; rd; goto iload3

CHAP. 4

Comments
MBR holds opcode; get next byte; dispatch
Do nothing
Read in next-to-top word on stack
H = top of stack
Add top two words; write to top of stack
Read in next-to-top word on stack
H = top of stack
Do subtraction; write to top of stack
Read in next-to-top word on stack
H = top of stack
Do AND; write to new top of stack
Read in next-to-top word on stack
H = top of stack
Do OR; write to new top of stack
Increment SP and copy to MAR
Write new stack word
Read in next-to-top word on stack
Wait for new TOS to be read from memory
