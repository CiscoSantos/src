for now is whether the value pushed onto the stack when vecprint is called is the
value on top of the stack when the RET on line 41 is executed. It is not. The solution is to replace line 40 with two lines:
ADD SP,10
POP BP

The first instruction removes the 5 words pushed onto the stack during vecprint,
thus exposing the value of BP saved on line 22. By popping this value to BP, we
restore BP to its precall value and expose the correct return address. Now the program terminates correctly. Debugging assembly code is definitely more of an art
than a science, but the tracer makes it much easier than running on the bare metal.

C.8.5 String Manipulation and String Instructions
The main purpose of this section is to show how to handle repeatable string
instructions. In Fig. C-17, there are two simple string manipulation programs,
strngcpy.s and reverspr.s, both present in the examples directory. The one in

SEC. C.8

.SECT .TEXT
stcstart:
PUSH mesg1
PUSH mesg2
CALL strngcpy
ADD SP,4
PUSH 0
PUSH 1
SYS
strngcpy:
PUSH CX
PUSH SI
PUSH DI
PUSH BP
MOV BP,SP
MOV AX,0
MOV DI,10(BP)
MOV CX,âˆ’1
REPNZ SCASB
NEG CX
DEC CX
MOV SI,10(BP)
MOV DI,12(BP)
PUSH DI
REP MOVSB
CALL stringpr
MOV SP,BP
POP BP
POP DI
POP SI
POP CX
RET
.SECT .DATA
mesg1: .ASCIZ "Have a look\n"
mesg2: .ASCIZ "qrst\n"
.SECT .BSS
(a)

737

EXAMPLES

! 1
! 2
! 3
! 4
! 5
! 6
! 7
! 8
! 9
! 10
! 11
! 12
! 13
! 14
! 15
! 16
! 17
! 18
! 19
! 20
! 21
! 22
! 23
! 24
! 25
! 26
! 27
! 28
! 29
! 30
! 31
! 32
! 33
! 34

#include "../syscalnr.h"

! 1

start: MOV DI,str
PUSH AX
