Software layer
Header

Payload

Seq #

Header

Payload

CRC

Seq #

Header

Payload

CRC

Transaction layer
Link layer
Physical layer
(a)

Frame

Frame

(b)

Figure 3-57. (a) The PCI Express protocol stack. (b) The format of a packet.

Let us examine the layers from the bottom up. The lowest is the physical
layer. It deals with moving bits from a sender to a receiver over a point-to-point
connection. Each point-to-point connection consists of one or more pairs of simplex (i.e., unidirectional) links. In the simplest case, there is one pair in each direction, but having 2, 4, 8, 16, or 32 pairs is also allowed. Each link is called a lane.
The number of lanes in each direction must be the same. First-generation products
must support a data rate each way of at least 2.5 Gbps, but the speed is expected to
migrate to 10 Gbps each way fairly soon.
Unlike the ISA/EISA/PCI buses, PCI Express does not have a master clock.
Devices are free to start transmitting as soon as they have data to send. This freedom makes the system faster but also leads to a problem. Suppose that a 1 bit is
encoded as +3 volts and a 0 bit as 0 volts. If the first few bytes are all 0s, how does
the receiver know data are being transmitted? After all, a run of 0 bits looks the
same as an idle link. The problem is solved using what is called 8b/10b encoding.
In this scheme, 10 bits are used to encode 1 byte of actual data in a 10-bit symbol.
Of the 1024 possible 10-bit symbols, the legal ones have been chosen to have
enough clock transitions to keep the sender and receiver synchronized on the bit
boundaries even without a master clock. A consequence of 8b/10b encoding is that
a link with a gross capacity of 2.5 Gbps can carry only 2 Gbps of (net) user data.
Whereas the physical layer deals with bit transmission, the link layer deals
with packet transmission. It takes the header and payload given to it by the
transaction layer and adds to them a sequence number and an error-correcting code
called a CRC (Cyclic Redundancy Check). The CRC is generated by running a
certain algorithm on the header and payload data. When a packet is received, the
receiver performs the same computation on the header and data and compares the
result with the CRC attached to the packet. If they agree, it sends back a short
acknowledgment packet affirming its correct arrival. If they disagree, the receiver asks for a retransmission. In this manner, data integrity is greatly improved

SEC. 3.6

EXAMPLE BUSES

227

over the PCI bus system, which does not have any provision for verification and retransmission of data sent over the bus.
To prevent having a fast sender bury a slow receiver in packets it cannot handle, a flow control mechanism is used. The mechanism is that the receiver gives
the transmitter a certain number of credits, basically corresponding to the amount
of buffer space it has available to store incoming packets. When the credits are
used up, the transmitter has to stop sending until it is given more credits. This
scheme, which is widely used in all networks, prevents losing data due to a mismatch of transmitter and receiver speeds.
The transaction layer handles bus actions. Reading a word from memory requires two transactions: one initiated by the CPU or DMA channel requesting
some data and one initiated by the target supplying the data. But the transaction
layer does more than handle pure reads and writes. It adds value to the raw packet
transmission offered by the link layer. To start with, it can divide each lane into up
to eight virtual circuits, each handling a different class of traffic. The transaction
layer can tag packets according to their traffic class, which may include attributes
such as high priority, low priority, do not snoop, may be delivered out of order, and
more. The switch may use these tags when deciding which packet to handle next.
Each transaction uses one of four address spaces:
1. Memory space (for ordinary reads and writes).
2. I/O space (for addressing device registers).
3. Configuration space (for system initialization, etc.).
4. Message space (for signaling, interrupts, etc.).
The memory and I/O spaces are similar to what current systems have. The configuration space can be used to implement features such as plug-and-play. The message space takes over the role of many of the existing control signals. Something
like this space is needed because none of the PCI busâ€™ control lines exist in PCI
Express.
The software layer interfaces the PCI Express system to the operating system.
It can emulate the PCI bus, making it possible to run existing operating systems
unmodified on PCI Express systems. Of course, operating like this will not exploit
the full power of PCI Express, but backward compatibility is a necessary evil that
is needed until operating systems have been modified to fully utilize PCI Express.
Experience shows this can take a while.
The flow of information is illustrated in Fig. 3-57(b). When a command is
given to the software layer, it hands it to the transaction layer, which formulates it
in terms of a header and a payload. These two parts are then passed to the link
layer, which attaches a sequence number to the front and a CRC to the back. This
enlarged packet is then passed on to the physical layer, which adds framing information on each end to form the physical packet that is actually transmitted. At the

228
