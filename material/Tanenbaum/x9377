The aim of the rest of the program is to read the number of a line, to read that
line into the buffer, and to output it by means of a write call. All the necessary
information can be found in the linh array, whose nth entry contains the position of
the start of line n in the file. If the line number requested is either 0 or out of
range, the program exits by jumping to label 7.
This part of the program starts with a call to the getnum subroutine on line 46.
This routine reads a line from standard input and stores it in the linein buffer, (on
lines 95 through 103). Next, we prepare for the SSCANF call. Considering the
reverse order of the arguments, we first push the address of curlin, which can hold
an integer value, then the address of the integer format string numfmt, and finally
the address of the buffer linein containing the number in decimal notation. The
system subroutine SSCANF puts the binary value in curlin if possible. On failure, it
returns a 0 in AX. This return value is tested on line 48; on failure, the program
generates an error message through label 8.
If the getnum subroutine returns a valid integer in curlin, then we first copy it
in BX. Next we test the value against the range in lines 49 through 53, generating
an EXIT if the line number is out of range.
Then we must find the end of the selected line in the file and the number of
bytes to be read, so we multiply BX by 2 with a left shift SHL. The file position of
the intended line is copied to AX on line 55. The file position of the next line is in
CX and will be used to compute the number of bytes in the current line.
To do a random read from a file, an lseek call is needed to set the file offset to
the byte to be read next. The lseek is performed with respect to the start of the file,

744

ASSEMBLY LANGUAGE PROGRAMMING

#include "../syscalnr.h"
bufsiz = 512
.SECT .TEXT
infbufst:
MOV BP,SP
MOV DI,linein
PUSH GETCHAR
1: SYS
CMPB AL,’\n’
JL 9f
JE 1f
STOSB
JMP 1b
1: PUSH 0
PUSH linein
PUSH OPEN
SYS
CMP AX,0
JL 9f
MOV (fildes),AX
MOV SI,linh+2
MOV BX,0
1: CALL fillbuf
CMP CX,0
JLE 3f
2: MOVB AL,’\n’
REPNE SCASB
JNE 1b
INC (count)
MOV AX,BX
SUB AX,CX
XCHG SI,DI
STOS
XCHG SI,DI
CMP CX,0
JNE 2b
JMP 1b
9: MOV SP,BP
PUSH linein
PUSH errmess
PUSH PRINTF
SYS

! 1
! 2
! 3
! 4
! 5
! 6
! 7
! 8
! 9
! 10
! 11
! 12
! 13
! 14
! 15
! 16
! 17
! 18
! 19
! 20
! 21
! 22
! 23
! 24
! 25
! 26
! 27
! 28
! 29
