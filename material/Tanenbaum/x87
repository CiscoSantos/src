M = ABC + ABC + ABC + ABC
as a compact way of giving the truth table. A function of n variables can thus be
described by giving a ‘‘sum’’ of at most 2n n-variable ‘‘product’’ terms. This formulation is especially important, as we will see shortly, because it leads directly to
an implementation of the function using standard gates.
It is important to keep in mind the distinction between an abstract Boolean
function and its implementation by an electronic circuit. A Boolean function consists of variables, such as A, B, and C, and Boolean operators such as AND, OR,
and NOT. A Boolean function is described by giving a truth table or a Boolean
function such as
F = ABC + ABC
A Boolean function can be implemented by an electronic circuit (often in many
different ways) using signals that represent the input and output variables and gates
such as AND, OR, and NOT. We will generally use the notation AND, OR, and NOT
when referring to the Boolean operators and AND, OR, and NOT when referring to
the gates, even though it is sometimes ambiguous as to whether we mean the functions or the gates.

3.1.3 Implementation of Boolean Functions
As mentioned above, the formulation of a Boolean function as a sum of up to
2n product terms leads directly to a possible implementation. Using Fig. 3-3 as an
example, we can see how this implementation is accomplished. In Fig. 3-3(b), the
inputs, A, B, and C, are shown at the left edge and the output function, M, is
shown at the right edge. Because complements (inverses) of the input variables are
needed, they are generated by tapping the inputs and passing them through the
inverters labeled 1, 2, and 3. To keep the figure from becoming cluttered, we have
drawn in six vertical lines, of which three are connected to the input variables, and
three connected to their complements. These lines provide a convenient source for
the inputs to subsequent gates. For example, gates 5, 6, and 7 all use A as an input.
In an actual circuit these gates would probably be wired directly to A without using
any intermediate ‘‘vertical’’ wires.
The circuit contains four AND gates, one for each term in the equation for M
(i.e., one for each row in the truth table having a 1 bit in the result column). Each

SEC. 3.1

GATES AND BOOLEAN ALGEBRA

153

gate computes one row of the truth table, as indicated. Finally, all the product
terms are ORed together to get the final result.
The circuit of Fig. 3-3(b) uses a convention that we will use repeatedly
throughout this book: when two lines cross, no connection is implied unless a
heavy dot is present at the intersection. For example, the output of gate 3 crosses
all six vertical lines but it is connected only to C. Be warned that some authors use
other conventions.
From the example of Fig. 3-3 it should be clear how we can derive a general
method to implement a circuit for any Boolean function:
1. Write down the truth table for the function.
2. Provide inverters to generate the complement of each input.
3. Draw an AND gate for each term with a 1 in the result column.
4. Wire the AND gates to the appropriate inputs.
5. Feed the output of all the AND gates into an OR gate.
AND

Although we have shown how any Boolean function can be implemented using
NOT, AND, and OR gates, it is often convenient to implement circuits using only a
single type of gate. Fortunately, it is straightforward to convert circuits generated
by the preceding algorithm to pure NAND or pure NOR form. All we need is a way
to implement NOT, AND, and OR using a single gate type. The top row of Fig. 3-4
shows how all three of these can be implemented using only NAND gates; the bottom row shows how it can be done using only NOR gates. (These are straightforward, but there are other ways, too.)
One way to implement a Boolean function using only NAND or only NOR gates
is first follow the procedure given above for constructing it with NOT, AND, and OR.
Then replace the multi-input gates with equivalent circuits using two-input gates.
For example, A + B + C + D can be computed as ( A + B) + (C + D), using three
two-input OR gates. Finally, the NOT, AND, and OR gates are replaced by the circuits of Fig. 3-4.
Although this procedure does not lead to the optimal circuits, in the sense of
the minimum number of gates, it does show that a solution is always feasible.
Both NAND and NOR gates are said to be complete, because any Boolean function
can be computed using either of them. No other gate has this property, which is
another reason they are often preferred for the building blocks of circuits.

3.1.4 Circuit Equivalence
Circuit designers often try to reduce the number of gates in their products to
reduce the chip area needed to implement them, minimize power consumption, and
increase speed. To reduce the complexity of a circuit, the designer must find another circuit that computes the same function as the original but does so with fewer

154

THE DIGITAL LOGIC LEVEL

CHAP. 3

A

A

A

A
(a)

A
A

AB

A+B

B
B

