Double quote

Figure C-9. Some of the escapes allowed by as88.

The SPACE pseudoinstruction simply requires the location pointer to be incremented by the number of bytes given in the arguments. This keyword is especially
useful following a label in the BSS segment to reserve memory for a variable.
ALIGN keyword is used to advance the location pointer to the first 2-, 4-, or 8-byte
boundary in memory to facilitate the assembly of words, longs, etc. at a suitable
memory location. Finally, the keyword EXTERN announces that the routine or
memory location mentioned will be made available to the linker for external references. The definition need not be in the current file; it can also be somewhere else,
as long as the linker can handle the reference.
Although the assembler itself is fairly general, when it is used with the tracer
some small points are worth noting. The assembler accepts keywords in either
uppercase or lowercase but the tracer always displays them in uppercase. Similarly, the assembler accepts both ‘‘\r’’ (carriage return) and ’’\n’’ (line feed) as the
new line indication, but the tracer always uses the latter. Moreover, although the
assembler can handle programs split over multiple files, for use with the tracer, the
entire program must be in a single file with extension ‘‘.$’’. Inside it, include files
can be requested by the command
#include filename

In this case, the required file is also written in the combined ‘‘.$’’ file at the position of the request. The assembler checks whether the include file was already

720

ASSEMBLY LANGUAGE PROGRAMMING

APP. C

processed and loads only one copy. This is especially useful if several files use the
same header file. In this case, only one copy is included in the combined source
file. In order to include the file, the #include must be the first token of the line
without leading white space, and the file path must be between double quotes.
If there is a single source file, say pr.s, then it is assumed that the project name
is pr, and the combined file will be pr.$. If there is more than one source file, then
the basename of the first file is taken to be the projectname, and used for the definition of the .$ file, which is generated by the assembler by concatenating the
source files. This behavior can be overridden if the command line contains a ‘‘–o
projname’’ flag before the first source file, in which case the combined file will be
projname. $.
Note that there are some drawbacks in using include files and more than one
source. It is necessary that the names of labels, variables and constants are different for all sources. Moreover, the file which is eventually assembled to the load file
is the projname. $ file, so the line numbers mentioned by the assembler in case of
errors and warnings are determined with respect to this file. For very small
projects, it is sometimes simplest to put the entire program in one file and avoid
#include.

C.5.3 Some Differences with Other 8088 Assemblers
The assembler, as88, is patterned after the standard UNIX assembler, and, as
such, differs in some ways from the Microsoft Macro Assembler MASM and the
Borland 8088 assembler TASM. Those two assemblers were designed for the MSDOS operating system, and in places the assembler issues and the operating system
issues are closely interrelated. Both MASM and TASM support all 8088 memory
models allowed by MS-DOS. There is, for example, the tiny memory model, in
which all code and data must fit in 64 KB, the small model, in which the code segment and the data segment each can be 64 KB, and large models, which contain
multiple code and data segments. The difference between those models depends
on the use of the segment registers. The large model allows far calls and changes
in the DS register. The processor itself puts some restrictions on the segment registers (e.g., the CS register is not allowed as destination in a MOV instruction). To
make tracing simpler, the memory model used in as88 resembles the small model,
although the assembler without the tracer can handle the segment registers without
additional restrictions.
These other assemblers do not have a .BSS section, and initialize memory only
in the DATA sections. Usually the assembler file starts with some header information, then the DATA section, which is indicated by the keyword .data, followed by
the program text after the keyword .code. The header has a keyword title to name
the program, a keyword .model to indicate the memory model, and a keyword
.stack to reserve memory for the stack segment. If the intended binary is a .com

SEC. C.5

THE ASSEMBLER

721

file, then the tiny model is used, all segment registers are equal, and at the head of
this combined segment 256 bytes are reserved for a ‘‘Program Segment Prefix.’’
Instead of the .WORD, .BYTE, and ASCIZ directives, these assemblers have
keywords DW for define word and DB for define byte. After the DB directive, a
string can be defined inside a pair of double quotes. Labels for data definitions are
not followed by a colon. Large chunks of memory are initialized by the DUP
keyword, which is preceded by a count and followed by an initialization. For
example, the statement
LABEL DB 1000 DUP (0)

initializes 1000 bytes of memory with ASCII zero bytes at the label LABEL.
Furthermore, labels for subroutines are not followed by a colon, but by the
keyword PROC. At the end of the subroutine, the label is repeated and followed by
the keyword ENDP, so the assembler can infer the exact scope of a subroutine.
Local labels are not supported.
The keywords for the instructions are identical in MASM, TASM, and as88.
Also, the source is put after the destination in two operand instructions. However,
it is common practice to use registers for the passing of arguments to functions,
instead of on the stack. If, however, assembly routines are used inside C or C++
programs, then it is advisable to use the stack in order to comply with the C subroutine calling mechanism. This is not a real difference, since it is also possible to
use registers instead of the stack for arguments in as88.
The biggest difference between the MASM, TASM and as88 is in making system calls. The system is called in MASM and TASM by means of a system interrupt INT. The most common one is INT 21H, which is intended for the MS-DOS
function calls. The call number is put in AX, so again we have passing of arguments
in registers. For different devices there are different interrupt vectors, and interrupt
numbers, such as INT 16H for the BIOS keyboard functions and INT 10H for the display. In order to program these functions, the programmer has to be aware of a
great deal of device-dependent information. In contrast, the UNIX system calls
available in as88 are much easier to use.

C.6 THE TRACER
The tracer-debugger is meant to run on a 24 × 80 ordinary (VT100) terminal,
