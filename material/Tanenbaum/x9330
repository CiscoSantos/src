
00011100

127

01111111

11111111

10000000

10000001

00000001

128

Nonexistent

Nonexistent

Nonexistent

10000000

00000000

Figure A-7. Negative 8-bit numbers in four systems.

ferent singularity. The bit pattern consisting of a 1 followed by all 0s is its own
complement. The result is to make the range of positive and negative numbers
unsymmetric; there is one negative number with no positive counterpart.
The reason for these problems is not hard to find: we want an encoding system
with two properties:
1. Only one representation for zero.
2. Exactly as many positive numbers as negative numbers.
The problem is that any set of numbers with as many positive as negative numbers
and only one zero has an odd number of members, whereas m bits allow an even
number of bit patterns. There will always be either one bit pattern too many or one
bit pattern too few, no matter what representation is chosen. This extra bit pattern
can be used for −0 or for a large negative number, or for something else, but no
matter what it is used for it will always be a nuisance.

678

BINARY NUMBERS

APP. A

A.5 BINARY ARITHMETIC
The addition table for binary numbers is given in Fig. A-8.
Addend
Augend
Sum
Carry

0
+0

0
+1

1
+0

1
+1

0
0

1
0

1
0

0
1

Figure A-8. The addition table in binary.

Two binary numbers can be added, starting at the rightmost bit and adding the
corresponding bits in the addend and the augend. If a carry is generated, it is carried one position to the left, just as in decimal arithmetic. In one’s complement
arithmetic, a carry generated by the addition of the leftmost bits is added to the
rightmost bit. This process is called an end-around carry. In two’s complement
arithmetic, a carry generated by the addition of the leftmost bits is merely thrown
away. Examples of binary arithmetic are shown in Fig. A-9.
Decimal

1's complement

2's complement

10
+ (−3)

00001010
11111100

