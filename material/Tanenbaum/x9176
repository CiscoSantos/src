bne else
movw FormatPtr, #:lower16:format
movt FormatPtr, #:upper16:format
bl printf
pop {r3, r4, r5, r6, r7, pc}
else:

main:

rsb k, r1, #6
subs k, k, r2
add n minus 1, r0, #-1
mov r0, n minus 1
mov r2, k
bl towers
mov r0, #1
mov r1, r4
mov r2, r6
bl towers
mov r0, n minus 1
mov r1, k
mov r2, r6
bl towers
pop {r3, r4, r5, r6, r7, pc}
.global main
push {lr}
mov Param0, #3
mov Param1, #1
mov Param2, Param0
bl towers
pop {pc}

421

r0
r1
r2
r0
r7
r5
@ save return addr and touched regs

@ is (n == 1)?
@ if not, jump to else code sequence
@ load format string pointer
@ print move
@k=6−i−j
@ compute (n-1) for recursive call

@ call towers(n−1, i, k)

@ call towers(1, k, j)

@ call towers(n−1, k, j)
@ restore touched registers and return to called
@ save called’s return address

@ call towers(3, 1, 3)
@ pop return address, return to called

format: .ascii "Move a disk from %d to %d\n\0"
Figure 5-45. The Towers of Hanoi for the OMAP4430 ARM CPU.

5.8.1 The Problem with the IA-32 ISA
Before getting into the details of the IA-64 and Itanium 2, it is useful to review
what is wrong with the IA-32 ISA to see what problems Intel was trying to solve
with the new architecture. The main fact of life that causes all the trouble is that

422

THE INSTRUCTION SET ARCHITECTURE LEVEL

CHAP. 5

IA-32 is an ancient ISA with all the wrong properties for current technology. It is
a CISC ISA with variable-length instructions and a myriad of different formats that
are hard to decode quickly on the fly. Current technology works best with RISC
ISAs that have one instruction length and a fixed-length opcode that is easy to
decode. The IA-32 instructions can be broken up into RISC-like micro-operations
at execution time, but doing so requires hardware (chip area), takes time, and adds
complexity to the design. That is strike one.
The IA-32 is also a two-address memory-oriented ISA. Most instructions reference memory, and most programmers and compilers think nothing of referencing
memory all the time. Current technology favors load/store ISAs that reference
memory only to get the operands into registers but otherwise perform all their calculations using three-address memory register instructions. And with CPU clock
speeds going up much faster than memory speeds, the problem will get worse with
time. That is strike two.
The IA-32 also has a small and irregular register set. Not only does this tie
compilers in knots, but the small number of general-purpose registers (four or six,
depending on how you count ESI and EDI) requires intermediate results to be
spilled into memory all the time, generating extra memory references even when
they are not logically needed. That is strike three. The IA-32 is out.
Now let us start the second inning. The small number of registers causes many
dependences, especially unnecessary WAR dependences, because results have to
go somewhere and no extra registers are available. Getting around the lack of registers requires the implementation to do renaming internally—a terrible hack if
ever there was one—to secret registers inside the reorder buffer. To avoid blocking
on cache misses too often, instructions have to be executed out of order. However,
the IA-32’s semantics specify precise interrupts, so the out-of-order instructions
have to be retired in order. All of these things require a lot of very complex hardware. Strike four.
Doing all this work quickly requires a deep pipeline. In turn, the deep pipeline
means that instructions entered into it take many cycles before they are finished.
