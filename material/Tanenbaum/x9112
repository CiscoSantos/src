8

2 1 1 3
1 1 1 2
1 2
1

1
1
1

7

4
4
4
3
2

1
1
1

1
1
1
1
1

1
1
1
1
1

1 1
1
1
1
1

7

1

1

8

1

1

9

1
1
1
1

1
1
1

1 1
1

7
Figure 4-44. Operation of a superscalar CPU with out-of-order issue and out-oforder completion.

The first difference occurs in cycle 3. Even though I4 has stalled, we are allowed to decode and issue I5 since it does not conflict with any pending instruction. However, skipping over instructions causes a new problem. Suppose that I5
had used an operand computed by the skipped instruction, I4. With the current
scoreboard, we would not have noticed this. As a consequence, we have to extend
the scoreboard to keep track of stores done by skipped-over instructions. This can
be done by adding a second bit map, 1 bit per register, to keep track of stores done

320

THE MICROARCHITECTURE LEVEL

CHAP. 4

by stalled instructions. (These counters are not shown in the figure.) The rule for
issuing instructions now has to be extended to prevent the issue of any instruction
with an operand scheduled to be stored into by an instruction that came before it
but was skipped over.
Now let us look back at I6, I7, and I8 in Fig. 4-43. Here we see that I6 computes a value in R1 that is used by I7. However, we also see that the value is never
used again because I8 overwrites R1. There is no real reason to use R1 as the place
to hold the result of I6. Worse yet, R1 is a terrible choice of intermediate register,
although a perfectly reasonable one for a compiler or programmer used to the idea
of sequential execution with no instruction overlap.
In Fig. 4-44 we introduce a new technique for solving this problem: register
renaming. The wise decode unit changes the use of R1 in I6 (cycle 3) and I7
(cycle 4) to a secret register, S1, not visible to the programmer. Now I6 can be
issued concurrently with I5. Modern CPUs often have dozens of secret registers
for use with register renaming. This technique can often eliminate WAR and
WAW dependences.
At I8, we use register renaming again. This time R1 is renamed into S2 so the
addition can be started before R1 is free, at the end of cycle 6. If it turns out that
the result really has to be in R1 this time, the contents of S2 can always be copied
