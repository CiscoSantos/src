Note that in the MOV and SUB instructions the first argument is the destination
and the second is the source. This is the convention used by our assembler; other
assemblers may reverse the order. There is no particular reason to choose one
order over the other.
Now let us try to assemble and run HlloWrld.s. Instructions will be given for
both UNIX and Windows platforms. For Linux, Solaris, MacOS X, and other
UNIX variants, the procedure should be essentially the same as for UNIX. First,
start up a command prompt (shell) window. On Windows, the click sequence is
usually
Start > Programs > Accessories > Command prompt

Next, change to the examples directory using the cd (Change directory) command.
The argument to this command depends on where the toolkit has been placed in the
file system. Then verify that the assembler and tracer binaries are in this directory,
using ls on UNIX and dir on Windows systems. They are called as88 and t88,
respectively. On Windows systems, they have the extension .exe, but that need not
be typed in the commands. If the assembler and tracer are not there, find them and
copy them there.
Now assemble the test program using
as88 HlloWrld.s

If the assembler is present in the examples directory but this command gives an
error message, try typing
./as88 HlloWrld.s

on UNIX systems or
.\as88 HlloWrld.s

on Windows systems.
If the assembly process completes correctly, the following messages will be
displayed:
Project HlloWrld listfile HlloWrld.$

SEC. C.8

EXAMPLES

729

Project HlloWrld num file HlloWrld.#
Project HlloWrld loadfile HlloWrld.88.

and the corresponding three files created. If there are no error messages, give the
tracer command:
t88 HlloWrld

The tracer display will appear with the arrow in the upper right-hand window
pointing to the
MOV CX,de-hw

instruction of line 6. Now hit the return (called Enter on PC keyboards) key.
Notice that the instruction pointed to is now
PUSH CX

and the value of CX in the left-hand window is now 12. Hit return again and notice
that the middle window on the top line now contains the value 000c, which is hexadecimal for 12. This window shows the stack, which now has one word containing 12. Now hit return three more times to see the PUSH instructions on lines 8, 9,
and 10 being carried out. At this point, the stack will have four items and the program counter in the left-hand window will have the value 000b.
The next time return is hit, the system call is executed and the string ‘‘Hello
World\n’’ is displayed in the lower right-hand window. Note that SP now has the
value 0x7ff0. After the next return, SP is incremented by 8 and becomes 0x7ff8.
After four more returns, the exit system call completes and the tracer exits.
To be certain that you understand how everything works, fetch the file
hlloWrld.s into your favorite editor. It is better not to use a word processor. On
UNIX systems, ex, vi, or emacs are good choices. On Windows systems, notepad is
a simple editor, usually reachable from
Start > Programs > Accessories > Notepad

Do not use Word since the display will not look right and the output may be formatted incorrectly.
Modify the string on line 19 to display a different message, then save the file,
assemble it, and run it with the tracer. You are now starting to do assembly language programming.

C.8.2 General Registers Example
The next example demonstrates in more detail how the registers are displayed
and one of the pitfalls of multiplication on the 8088. In Fig. C-13, part of the program genReg.s is shown on the left. To its right are two tracer register windows,
corresponding to different stages of the program’s execution. Fig. C-13(b) shows
the register state after line 7 has been executed. The instruction
MOV AX,258

on line 4 loads the value 258 in AX, which results in the value 1 being loaded into

730

ASSEMBLY LANGUAGE PROGRAMMING

APP. C

and the value 2 being loaded into AL. Then line 5 adds AL to AH, making AH
equal to 3. On line 6, the contents of the variable times (10) are copied into CX.
On line 7, the address of the variable muldat, which is 2 because it is at the second
byte of the DATA segment, is loaded into BX. This is the instant in time at which
the dump of Fig. C-13(b) was made. Note that AH is 3, AL is 2, and AX is 770,
which is to be expected, as 3 × 256 + 2 = 770.
AH

start:
MOV AX,258
ADDB AH,AL
MOV CX,(times)
MOV BX,muldat
MOV AX,(BX)
