Copy new word to TOS
Set MAR to SP − 1; read 2nd word from stack
Set MAR to top word
Save TOS in H; write 2nd word to top of stack
Copy old TOS to MDR
Set MAR to SP − 1; write as 2nd word on stack
Update TOS
MBR = the byte to push onto stack
Increment PC, fetch next opcode
Sign-extend constant and push on stack
MBR contains index; copy LV to H
MAR = address of local variable to push
SP points to new top of stack; prepare write
Inc PC; get next opcode; write top of stack
Update TOS
MBR contains index; copy LV to H
MAR = address of local variable to store into
Copy TOS to MDR; write word
Read in next-to-top word on stack
Increment PC; fetch next opcode
Update TOS
Fetch operand byte or next opcode
Multiway branch with high bit set
MBR contains 1st index byte; fetch 2nd
H = 1st index byte shifted left 8 bits
H = 16-bit index of local variable
MAR = address of local variable to push
MBR contains 1st index byte; fetch 2nd
H = 1st index byte shifted left 8 bits
H = 16-bit index of local variable
MAR = address of local variable to store into
MBR contains 1st index byte; fetch 2nd
H = 1st index byte << 8
H = 16-bit index into constant pool
MAR = address of constant in pool

SEC. 4.3
Label
iinc1
iinc2
iinc3
iinc4
iinc5
iinc6
goto1
goto2
goto3
goto4
goto5
goto6
iflt1
iflt2
iflt3
iflt4
ifeq1
ifeq2
ifeq3
ifeq4
if icmpeq1
if icmpeq2
if icmpeq3
if icmpeq4
if icmpeq5
if icmpeq6
T
F
F2
F3
invokevirtual1
invokevirtual2
invokevirtual3
invokevirtual4
invokevirtual5
invokevirtual6
invokevirtual7
invokevirtual8
invokevirtual9
invokevirtual10
invokevirtual11
invokevirtual12
invokevirtual13
invokevirtual14
invokevirtual15
invokevirtual16
invokevirtual17
invokevirtual18
invokevirtual19
invokevirtual20
invokevirtual21
invokevirtual22

AN EXAMPLE IMPLEMENTATION
Operations
H = LV
MAR = MBRU + H; rd
PC = PC + 1; fetch
H = MDR
PC = PC + 1; fetch
MDR = MBR + H; wr; goto Main1
OPC = PC − 1
