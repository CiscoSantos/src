gained by using the worst fit algorithm?
21. Describe a purpose for the file open system call that was not mentioned in the text.
22. To be able to make some predictions of disk performance, it is useful to have a model
of storage allocation. Suppose that the disk is viewed as a linear address space of
N >> 1 sectors, consisting of a run of data blocks, then a hole, then another run of data
blocks, and so on. If empirical measurements show that the probability distributions
for data and hole lengths are the same, with the chance of either being i sectors as 2−i ,
what is the expected number of holes on the disk?

CHAP. 6

PROBLEMS

513

23. On a certain computer, a program can create as many files as it needs, and all files may
grow dynamically during execution without giving the operating system any advance
information about their ultimate size. Do you think that files are stored in consecutive
sectors? Explain.
24. Studies of different file systems have shown that more than half the files are a few KB
or smaller, with the vast majority of files less than something like 8 KB. On the other
hand, the largest 10 percent of all files usually occupies about 95 percent of the entire
disk space in use. From this data, what conclusion can you draw about disk block size?
25. Consider the following method by which an operating system might implement semaphore instructions. Whenever the CPU is about to do an up or down on a semaphore
(an integer variable in memory), it first sets the CPU priority or mask bits in such a
way as to disable all interrupts. Then it fetches the semaphore, modifies it, and
branches accordingly. Finally, it enables interrupts again. Does this method work if
a. There is a single CPU that switches between processes every 100 msec?
b. Two CPUs share a common memory in which the semaphore is located?
26. The description of semaphores in Sec. 6.3.3 states: ‘‘Usually sleeping processes are
strung together in a queue to keep track of them.’’ What advantage is gained by using a
queue for waiting processes as opposed to waking a random sleeping processes when
an up is performed?
27. The Nevercrash Operating System Company has been receiving complaints from some
of its customers about its latest release, which includes semaphore operations. They
feel it is immoral for processes to block (they call it ‘‘sleeping on the job’’). Since it is
company policy to give the customers what they want, it has been proposed to add a
third operation, peek, to supplement up and down. peek simply examines the semaphore without changing it or blocking the process. In this way, programs that feel it is
immoral to block can first inspect the semaphore to see if it is safe to do a down. Will
this idea work if three or more processes use the semaphore? If two processes use the
semaphore?
28. Make a table showing which of the processes P1, P2, and P3 are running and which are
blocked as a function of time from 0 to 1000 msec. All three processes perform up and
down instructions on the same semaphore. When two processes are blocked and an up
is done, the process with the lower number is restarted, that is, P1 gets preference over
P2 and P3, and so on. Initially, all three are running and the semaphore is 1.
At t = 100
At t = 200
At t = 300
At t = 400
At t = 500
At t = 600
At t = 700
At t = 800
At t = 900

P1 does a down
P1 does a down
P2 does an up
P3 does a down
P1 does a down
P2 does an up
P2 does a down
P1 does an up
P1 does an up

29. In an airline reservation system, it is necessary to ensure that while one process is busy
using a file, no other process can also use it. Otherwise, two different processes,

514

THE OPERATING SYSTEM MACHINE LEVEL

CHAP. 6

working for two different ticket agents, might each inadvertently sell the last seat on
some flight. Devise a synchronization method using semaphores that makes sure that
only one process at a time accesses each file (assuming the processes obey the rules).
30. To make it possible to implement semaphores on a computer with multiple CPUs that
share a common memory, computer architects often provide a Test and Set Lock instruction. TSL X tests the location X. If the contents are zero, they are set to 1 in a single, indivisible memory cycle, and the next instruction is skipped. If it is nonzero, the
TSL acts like a no-op. Using TSL it is possible to write procedures lock and unlock with
the following properties. lock(x) checks to see if x is locked. If not, it locks x and returns control. If x is already locked, it just waits until it becomes unlocked, then it
locks x and returns control. unlock releases an existing lock. If all processes lock the
semaphore table before using it, only one process at a time can fiddle with the variables and pointers, thus preventing races. Write lock and unlock in assembly language.
(Make any reasonable assumptions you need.)
31. Show the values of in and out for a circular buffer of length 65 words after each of the
following operations. Both start at 0.
a. 22 words are put in
b. 9 words are removed
c. 40 words are put in
d. 17 words are removed
e. 12 words are put in
f. 45 words are removed
g. 8 words are put in
h. 11 words are removed
32. Suppose that a version of UNIX uses 2-KB disk blocks and stores 512 disk addresses
per indirect block (single, double, and triple). What would the maximum file size be?
(Assume that file pointers are 64 bits wide).
33. Suppose that the UNIX system call
unlink(′′/usr/ast/bin/game3′′)
